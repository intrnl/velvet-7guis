<script>
	import { batch } from '@intrnl/velvet';

	const BASE_RADIUS = 30;
	const MAX_RADIUS = 100;

	let snapshots = [[]];
	let step = 0;

	let resizing = null;
	let radius = 0;

	let dialogRef = null;

	$: snap = snapshots[step];

	$: {
		if (dialogRef) {
			if (resizing) {
				dialogRef.showModal();
			}
			else if (dialogRef.open) {
				dialogRef.close();
			}
		}
	}

	function undo () {
		if (resizing) {
			return;
		}

		step = Math.max(step - 1, 0);
	}

	function redo () {
		if (resizing) {
			return;
		}

		step = Math.min(step + 1, snapshots.length - 1);
	}

	function handleCanvasClick (ev) {
		if (resizing || ev.target !== ev.currentTarget) {
			return;
		}

		const x = ev.layerX;
		const y = ev.layerY;

		const next = snap.concat({ x, y, r: BASE_RADIUS });
		addSnapshot(next);
	}

	function handleCircleContextMenu (node, ev) {
		ev.preventDefault();

		batch(() => {
			resizing = node;
			radius = node.r;
		});
	}

	function handleResizeChange (ev) {
		if (!resizing) {
			return;
		}

		radius = ev.target.valueAsNumber;
	}

	function handleResizeCancel () {
		resizing = null;
	}

	function handleResizeConfirm () {
		const index = snap.findIndex((item) => item === resizing);

		batch(() => {
			if (index !== -1 && resizing.r !== radius) {
				const next = { ...resizing, r: radius };
				const array = snap.slice();

				array[index] = next;
				addSnapshot(array);
			}

			resizing = null;
		});
	}

	function addSnapshot (snap) {
		const next = snapshots.slice(0, step + 1);
		next.push(snap);

		batch(() => {
			snapshots = next;
			step++;
		});
	}
</script>

<div class='window' style='width: 418px'>
	<div class='window-title'>
		<span>Circle Drawer</span>
	</div>
	<div class='window-content'>
		<div class='actions'>
			<button @click={undo} ?disabled={step < 1} class='button'>
				Undo
			</button>
			<button @click={redo} ?disabled={step >= snapshots.length - 1} class='button'>
				Redo
			</button>
		</div>

		<!-- It's much much more easier to just fake a circle when resizing -->
		<div @click={handleCanvasClick} class='x-canvas'>
			{#each snap as node}
				<div
					class='x-circle'
					style={{
						'--x': node.x + 'px',
						'--y': node.y + 'px',
						'--r': node.r + 'px',
						'--d': resizing === node ? 'none' : 'block',
					}}
					@contextmenu={(ev) => handleCircleContextMenu(node, ev)}
				/>
			{/each}

			{#if resizing}
				<div
					class='x-circle'
					style={{
						'--x': resizing?.x + 'px',
						'--y': resizing?.y + 'px',
						'--r': radius + 'px',
						'--d': 'block',
					}}
				/>
			{/if}
		</div>
	</div>
</div>

<dialog #ref={dialogRef} @close={handleResizeCancel} class='window x-dialog-window'>
	<div class='window-title'>
		<span>Adjust circle diameter</span>
	</div>

	<div class='window-content'>
		<p class='x-dialog-text'>
			Adjust diameter of circle at ({resizing?.x}, {resizing?.y})
		</p>
		<input
			type='range'
			max={MAX_RADIUS}
			.value={radius}
			@input={handleResizeChange}
		/>

		<div class='window-actions'>
			<button @click={handleResizeCancel} class='button'>
				Cancel
			</button>
			<button @click={handleResizeConfirm} class='button'>
				Done
			</button>
		</div>
	</div>
</dialog>

<style>
	@import './base.module.css';

	.x-dialog-window {
		padding: 0;
	}
	.x-dialog-window:not([open]) {
		display: none;
	}
	.x-dialog-text {
		margin: 0 0 8px;
	}
	.x-dialog-window input[type='range'] {
		width: 100%;
		margin: 0;
	}

	.x-canvas {
		background: #ffffff;
		height: 200px;
		width: 400px;
		border-radius: 3px;
		border: 1px solid black;
		margin-top: 8px;
		position: relative;
		overflow: hidden;
	}

	.x-circle {
		transform: translate(-50%, -50%);
		display: var(--d);
		height: var(--r);
		width: var(--r);
		border-radius: 50%;
		border: 1px solid #000000;
		position: absolute;
		left: var(--x);
		top: var(--y);
	}
	.x-circle:hover {
		background-color: rgb(238 238 238);
		z-index: 2;
	}

	.actions {
		display: flex;
		gap: 4px;
	}
</style>
